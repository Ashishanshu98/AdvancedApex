    public with sharing class TestDataFactory {

        public static CollaborationGroup ConstructCollaborationGroup(){
            CollaborationGroup ChatterGroup = new CollaborationGroup(
                Name = 'TEST'+Constants.INVENTORY_ANNOUNCEMENTS,  
                CollaborationType = 'Public',
                IsArchived = false,
                IsAutoArchiveDisabled = true
            );
            return ChatterGroup;
        }

    public static list<Product2> ConstructProducts(Integer cnt){
            list<Product2> products=new list<Product2>();
            list<Schema.PicklistEntry> pEntries = Constants.PRODUCT_FAMILY;
            Integer pVal = 0;
            for(Integer i=0;i<cnt;i++){
                Product2 pd2=new Product2();
                pd2.Name='Product-'+i;
                pd2.IsActive = true;
                pd2.Initial_Inventory__c = 10;
                if(pVal == 4){
                    pVal = 0;
                }
                pd2.Family = pEntries.get(pVal).getValue();
                pVal++;
                products.add(pd2);
            }
            return products;
        }

    public static list<PriceBookEntry> ConstructPricebookEntries(List<Product2> prods){
            list<PriceBookEntry> entries=new list<PriceBookEntry>();
            for(Product2 pd2: prods){
                PriceBookEntry pbe=new PriceBookEntry();
                pbe.isActive = true;
                pbe.UnitPrice = 100;
                pbe.Product2Id = pd2.id;
                pbe.PriceBook2Id = Constants.STANDARD_PRICEBOOK_ID;
                entries.add(pbe);
            }
            return entries;
        }

    public static list<Account> ConstructAccounts(Integer cnt){
            list<Account> accounts=new list<Account>();
            for(Integer i=0;i<cnt;i++){
                Account ac=new Account();
                ac.Name = 'Account'+i;
                accounts.add(ac);
            }
            return accounts;
        }

    public static list<Contact> ConstructContacts(Integer cnt, List<Account> accts){
            list<Contact> conts=new list<Contact>();
            for(Integer i=0;i<cnt;i++){
                contact con=new contact();
                con.LastName = 'Contact'+i;
                con.AccountId = accts.get(i).id;
                conts.add(con);
            }
            return conts;
        }

    public static list<Order> ConstructOrders(Integer cnt, List<Account> accts){
            list<Order> orders=new list<Order>();
            for(Integer i=0;i<cnt;i++){
                Order ord=new Order();
                ord.Name = 'Order'+i;
                ord.AccountId = accts.get(i).Id;
                ord.EffectiveDate = Date.Today();
                ord.Status = Constants.DRAFT_ORDER_STATUS;
                ord.Pricebook2Id = Constants.STANDARD_PRICEBOOK_ID;
                orders.add(ord);
                
            }
            return orders;
        }

    public static list<OrderItem> ConstructOrderItems(integer cnt, list<pricebookentry> pbes, list<order> ords){
            list<OrderItem> orderItems=new list<OrderItem>();
        
            for(Integer i=0;i<cnt;i++){
                OrderItem oItem=new OrderItem();
                oItem.OrderId = ords.get(i).Id;
                oItem.PriceBookEntryId = pbes.get(i).Id;
                oItem.Quantity = Constants.DEFAULT_ROWS;
                oItem.UnitPrice = 10;
                orderItems.add(oItem);
            }
            return orderItems;
        }

    public static void InsertTestData(Integer cnt){
            list<Account> accounts = ConstructAccounts(cnt);
            Insert accounts;
            
            list<Contact> contacts = ConstructContacts(cnt, accounts);
            insert contacts;
            
            list<Product2> prods= ConstructProducts(cnt);
            insert prods;
            
            list<PriceBookEntry> entries = ConstructPricebookEntries(prods);
            insert entries;
            
            list<Order> orders = ConstructOrders(cnt, accounts);
            insert orders;
            
            list<OrderItem> ordItems = ConstructOrderItems(cnt, entries, orders);
            insert ordItems;

        }

    public static void VerifyQuantityOrdered(Product2 originalProduct, Product2 updatedProduct, Integer qtyOrdered){
            system.AssertEquals(updatedProduct.Quantity_Ordered__c,originalProduct.Quantity_Ordered__c  +qtyOrdered);
    
    }  

    }
